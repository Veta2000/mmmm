def process_image(imagename,resultname,
params="--edge-thresh 10 --peak-thresh 5") :

if imagename[-3:]	!= 'pgm':
# создать pgm-файл
im = Image.open(imagename).convert('L')
im.save('tmp.pgm')
imagename = 'tmp.pgm'

cmmd = str("sift "+imagename+" --output="+resultname+
" "+params) os.system(cmmd)
print 'processed', imagename, 'to', resultname

def read_features_from_file (filename) :
f = loadtxt (filename)
return f[:,:4],f[:,4:]	# положения признаков, дескрипторы

def read_features_from_file (filename) :
#Прочитать признаки и вернуть их в виде матрицы.
f = loadtxt (filename)
return f[:,:4],f[:,4:]	# положения признаков, дескрипторы

def write_features_to_file (filename, Iocs, desc) :
savetxt (filename, hstack ( (Iocs, desc) ) )

def plot_features(im,Iocs,circle=False) :
def draw_circle(с,г):
t = arange(0,1.01,.01)*2*pi х = r*cos(t) + с[0] у = r*sin(t) + с[1] plot(х,у,'Ь',linewidth=2)
imshow(im) if circle:
for p in Iocs:
draw_circle(p[:2],p[2])
else:
plot(Iocs[:,0],Iocs[:,1],'ob') axis('off')

import sift
'empire.jpg'
iml = array(Image.open(imname).convert('L')) sift.process_image(imname,'empire.sift')
11, dl = sift. read_features_f rom_file ('empire . sift')
figure () gray ()
sift.plot_features(iml,11,circle=True) show()


def match(descl/desc2) :
#Для каждого дескриптора в первом изображении найти соответствующий ему во втором изображении. вход: descl (дескрипторы первого изображения), desc2 (дескрипторы второго изображения).
descl = array([d/linalg.norm(d) for d in descl]) desc2 = array([d/linalg.norm(d) for d in desc2])
dist_ratio = 0.6 descl_size = descl.shape
matchscores = zeros((descl_size[0],1),'int')
desc2t = desc2.T # вычислить транспонированную матрицу
for i in range(descl_size[0]):
dotprods = dot(descl[i,:],desc2t) # вектор скалярных
# произведений
dotprods = 0.9999*dotprods
#	вычислить арккосинусы и отсортировать, получив в результате
#	индекс признаков во втором изображении indx = argsort(arccos(dotprods))
#	проверить, верно ли, что для ближайшего соседа угол меньше,
#	чем dist_ratio, умноженное на угол для следующего соседа if arccos(dotprods)[indx[0]] < dist_ratio * arccos(dotprods)[indx[l]]:
matchscores[i ] = int(indx[0])
return matchscores
